#!/usr/bin/env zsh
#
# The dotfile manager (dmgr)
#
# Help build and manage your best *nix environment :)
#
# @rev    0.9.0
# @update 2014-08-20
# @author TADOKORO Saneyuki <saneyan@mail.gfunction.com>
#

REC=0
DMGR_DIST=$(uname -r)
DMGR_CONFDIR=$HOME/.dmgr/conf
DMGR_FEATUREDIR=$HOME/.dmgr/features
DMGR_PLUGINDIR=$HOME/.dmgr/plugins
DMGR_HOOKDIR=$HOME/.dmgr/hooks
DMGR_INUSE=$DMGR_CONFDIR/inuse.list
DMGR_SUPPORT=$DMGR_CONFDIR/support.list

# Load dotfile path.
source $DMGR_CONFDIR/paths/_repo

#
# Parse feature list to array format of shellscript.
# @param $1 The list file path.
#
function _parse() {
  echo $(cat $1) | tr -s ',' ' '
}

#
# Parse array to feature list and save it.
# @param $1 The list file path.
# @param $2... An array containing feature names.
#
function _save() {
  echo ${@:2} | tr -s ' ' ',' > $1
}

#
# Get file paths with specific pattern.
# @param $1 Directory.
# @param $2 Pattern.
#
function _get() {
  find $1 | grep -E $2 2>/dev/null
}

#
# Hook dot recipe.
# @param $1 Executive mode.
# @param $2... Commands which this function can call.
#
function _hook() {
  local line= reg= args= ac= e=
  local mode="null"
  REC=$(($REC + 1))

  if [ $# -le 2 ]; then
    echo "Too few arguments."
    return 1
  fi

  for e in ${@:3}; do
    ac=$ac$(echo $e |
      sed "s/^ALL$/a/" |
      sed "s/^ECHO$/e/" |
      sed "s/^RUN$/r/" |
      sed "s/^LINK$/l/" |
      sed "s/^UNLINK$/u/" |
      sed "s/^REARCH$/c/")
  done

  if [ $REC = 2 ]; then
    echo -e "\x1B[36m==> NESTED HOOK <${1}>: ${2}\x1B[0m"
  else
    echo -e "\x1B[32mHOOK <${1}>: ${2}\x1B[0m"
  fi

  cat $2 | while read line; do
    if [[ $line =~ "\[[a-z]+\]" ]]; then
      [ $line = "[$1]" ] && mode=$1 || mode="null"
    elif [ $mode != "null" ]; then
      if [[ $line =~ "^ECHO\s" ]]   && [[ $ac =~ "a|e" ]]; then
        eval $(echo $line | sed "s/^ECHO/echo/")
      elif [[ $line =~ "^RUN\s" ]]      && [[ $ac =~ "a|r" ]]; then
        eval $(echo $line | sed "s/^RUN//")
      elif [[ $line =~ "^REARCH\s" ]] && [[ $ac =~ "a|c" ]]; then
        e=($(echo $line))
        cmd="s,^REARCH ${e[2]} "${e:2}",_hook ${e[2]} ${2} "${e:2}","
        eval $(echo $line | sed $cmd)
      elif [[ $line =~ "^LINK\s" ]]   && [[ $ac =~ "a|l" ]]; then
        eval $(echo $line | sed "s/^LINK/_link/")
      elif [[ $line =~ "^UNLINK\s" ]] && [[ $ac =~ "a|u" ]]; then
        eval $(echo $line | sed "s/^UNLINK/_unlink/")
      fi
    fi
  done

  REC=$(($REC - 1))

  return 0
}

#
# Link symlinks.
#
function _link() {
  local src= dst=
  
  if [ $# -le 2 ]; then
    src=$(eval "echo $1" | sed "s,@,${DMGR_REPODIR}/common/,")
    if [ $# -eq 2 ]; then
      dst=$(eval "echo ${2}")
    else
      dst=$HOME/.$(echo $1 | sed "s/@//")
    fi
    [ $DMGR_DEBUGMODE ] &&
      ln -sv $src $dst || ln -s $src $dst
  else
    echo "Too many arguments."
    return 1
  fi

  return 0
}

#
# Unlink symlinks.
# @param $1 Original file path.
#
function _unlink() {
  declare -a lns tns
  local e=

  if [ $# -ge 2 ]; then
    echo "Too many arguments."
    return 1
  fi

  [ "${LISTS}" = "" ] && LISTS=$(find $HOME -ls)

  lns=($(echo $LISTS |
  grep -oE "/.*\s\->.*$" |
  tr -s " \-> " "," |
  grep -E $(echo $(eval "echo $1" | sed "s,@,${DMGR_REPODIR}/common/,") | sed "s,\.,\\\.,g") |
  sed "s,\,.*,,g"))

  for e in $lns; do
    [ $DMGR_DEBUGMODE ] &&
      rm -v $e || rm $e
  done

  return 0
}

#
# Report an error and exit with error status.
# @param $1 An error message.
#
function _reperr() {
  echo $1 && exit 1
}

#
# Bold message font.
# @param $1 Message.
#
function _fbold() {
  echo -e "\033[0;1m${1}\033[0;0m"
}

#
# Add debug prefix to message top.
# #param $1 Message.
#
function _d() {
  echo -e "\x1B[35mDEBUG\x1B[0m ${1}"
}

#
# Colorize message font.
# @param $1 Color.
# @param $2 Message

#
# Define config paths.
# @param $1... Config paths.
#
function def() {
  DMGR_CONFPATH=(${@:1} $DMGR_CONFPATH)
}

#
# Check if dmgr uses specific feature.
# @param $1 Feature name.
#
function dmgr_has() {
  [[ ${$(_parse $DMGR_INUSE)[(r)$1]} == ${1} ]] && exit 0
  exit 1
}

#
# Check if dmgr supports specific feature.
# @param $1 Feature name.
#
function dmgr_deals() {
  [[ ${$(_parse $DMGR_SUPPORT)[(r)$1]} == ${1} ]] && exit 0
  exit 1
}

#
# Show help message.
#
function dmgr_help() {
  exit 0
}

#
# Support a new feature.
# @param $1 Feature name.
#
function dmgr_support() {
  if $(dmgr_deals $1); then
    echo "${1} has already been supported."
    exit 1
  fi

  _save $DMGR_SUPPORT $(_parse $DMGR_SUPPORT) $1
  echo "${1} has been supported."
  exit 0
}

#
# Remove a feature from support list.
# @param $1 Feature name.
#
function dmgr_unsupport() {
  if ! $(dmgr_deals $1); then
    echo "${1} has not already been supported."
    exit 1
  fi

  _save $DMGR_SUPPORT ${$(_parse $DMGR_SUPPORT)[@]/($1)}
  echo "${1} has not been supported."
  exit 0
}

#
# Enable a feature. The feature must be supported by dmgr.
# @param $1 Feature name.
#
function dmgr_enable() {
  ! $(dmgr_deals $1) &&
    _reperr "${1} is not supported. To support this feature, use 'dmgr support <feature_name>'"

  $(dmgr_has $1) &&
    _reperr "${1} has already been enabled."

  # Load and call a hook callback.
  [ -e $DMGR_HOOKDIR/$1 ] && ! _hook enable $DMGR_HOOKDIR/$1 ALL &&
    _reperr "Not successful. Aborted."

  _save $DMGR_INUSE $(_parse $DMGR_INUSE) $1
  echo "${1} has been enabled."
  exit 0
}

#
# Disable a feature. The feature must be supported by dmgr.
# @param $1 Feature name.
#
function dmgr_disable() {
  ! $(dmgr_deals $1) &&
    _reperr "${1} is not supported. To support this feature, use 'dmgr support <feature_name>'"

  ! $(dmgr_has $1) &&
    _reperr "${1} has already been disabled."

  # Load and call a hook callback.
  [ -e $DMGR_HOOKDIR/$1 ] && ! _hook disable $DMGR_HOOKDIR/$1 ALL &&
    _reperr "Not successful. Aborted."

  _save $DMGR_INUSE ${$(_parse $DMGR_INUSE)[@]/#%($1)}
  echo "${1} has been disabled."
  exit 0
}

#
# Show feature list.
#
function dmgr_list() {
  declare -a inuse support enabled
  local e=

  inuse=($(_parse $DMGR_INUSE))
  support=($(_parse $DMGR_SUPPORT))
  enabled=($(echo ${inuse[@]}; echo ${support[@]} | sed 's/\s/\n/g' | sort | uniq -d))

  echo "Description: * enabled, - disabled"

  for e in $enabled; do echo " * ${e}"; done
  for e in $(eval "echo \${support[@]/#%($(echo $enabled | tr -s ' ' '|'))/}"); do
    echo " - ${e}";
  done

  exit 0
}

#
# Update system or features.
#
function dmgr_update() {
  declare -a inuse
  local e=

  cd $DMGR_REPODIR

  _fbold ":: Checking for updates..."
  git pull origin master

  _fbold "\n:: Updating dotfiles..."
  inuse=($(_parse $DMGR_INUSE))

  for e in $inuse; do
    [ -f $DMGR_HOOKDIR/$e ] && ! _hook update $DMGR_HOOKDIR/$e ALL &&
      _reperr "Not successful. Aborted."
  done

  echo -e "\nUpdated."

  exit 0
}

#
# Edit a config file.
# @param $1 Config ID.
#
function dmgr_edit() {
  local e= item= config= CONF= SUDO=0
  local desc="As staff (0) or root (1)\tType\tPath"

  for e in $(_parse $DMGR_INUSE); do
    [ -e $DMGR_CONFDIR/paths/$e ] && source $DMGR_CONFDIR/paths/$e
  done

  for item in $DMGR_CONFPATH
  do
    config=($(echo ${item}))
    if [ "${config[2]}" = "${1}" ]; then
      CONF=$config[3]; SUDO=$config[1]
      break
    fi
  done

  if [ "${CONF}" != "" ]; then
    if [ $SUDO -eq 1 ]; then
      eval "sudo ${EDITOR} ${CONF}"
    else
      eval "${EDITOR} ${CONF}"
    fi
    exit 0
  fi

  echo -e "Invalid argument value '${1}'\n"
  echo -e $desc

  for item in ${DMGR_CONFPATH}
  do
    config=($(echo ${item}))
    echo -e "${config[1]}\t${config[2]}\t${config[3]}"
  done
  exit 1
}

[[ "${0}" =~ "dmgr.debug$" ]] && DMGR_DEBUGMODE=true

if [ $DMGR_DEBUGMODE ]; then
  _fbold "dmgr v0.9.0 on DEBUG MODE\n"
  _d '$0 (dmgr path): '$0
  _d '$1 (dmgr command): '$1
  _d '$2.. (options): '${@:2}
  _d '$DMGR_DIST: '$DMGR_DIST
  _d '$DMGR_CONFDIR: '$DMGR_CONFDIR
  _d '$DMGR_FEATUREDIR: '$DMGR_FEATUREDIR
  _d '$DMGR_PLUGINIDR: '$DMGR_PLUGINDIR
  _d '$DMGR_HOOKDIR: '$DMGR_HOOKDIR
  _d '$DMGR_INUSE: '$DMGR_INUSE
  _d '$DMGR_SUPPORT: '$DMGR_SUPPORT
  echo ""
fi

case $1 in
  "has")        dmgr_has $2 ;;
  "deals")      dmgr_deals $2 ;;
  "support")    dmgr_support $2 ;;
  "unsupport")  dmgr_unsupport $2 ;;
  "edit")       dmgr_edit $2 ;;
  "enable")     dmgr_enable $2 ;;
  "disable")    dmgr_disable $2 ;;
  "update")     dmgr_update ;;
  "list")       dmgr_list ;;
  "help")       dmgr_help ;;
esac

echo "Type 'dmgr help' for more help."
exit 1
