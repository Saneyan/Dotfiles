#
# .zfunctions
#
# @rev    G-0.0.1
# @update 2013-11-12
# @author Saneyuki Tadokoro <saneyan@mail.gfunction.com>

# Move to trash in order to avoid removing a file by mistake
function r() {
  if [ ! -e ~/.trash ]; then
    mkdir ~/.trash
  fi

  mv $1 ~/.trash
}

# Empty trash
function em() {
  RES=1

  echo -n "Do you want to empty trash? [y/n] (default n): "
  read ANS

  if [ -e ~/.trash -a "$ANS" = "y" ]; then
    rm -rf ~/.trash/*
    
    if [ "$?" -eq 0 ]; then
      echo "Trash has been empty :)"
      RES=0
    fi
  fi

  if [ "$RES" -eq 1 ]; then
    echo "Trash not empty :("
  fi
}

# Git
function g() {
  ###################
  # <Flag> <Command>
  configs=(
    "a add"
    "A add ."
    "c commit -m"
    "s status"
    "u push"
    "U push"
    "l pull"
    "L pull"
    "r rm -rf"
    "R rm -rf --cached"
    "o checkout"
    "b branch"
    "B branch"
    "e rebase"
    "m merge"
  )

  desc="Flag\tCommand"

  while getopts a:Ac:suU:lL:r:R:o:bB:em:h arg
  do
    for item in $configs
    do
      config=(`echo ${item}`)
      if [ "${arg}" = "${item[1]}" ]; then
        eval "git ${item:2} ${OPTARG}"
      elif [ "${arg}" = "h" ]; then
        view_configs $desc $configs
        break
      fi
    done
  done
}

# Edit configuration files
function ec() {
  configs=("${GFUNCTION_CONF_DIR[@]}" "${GFUNCTION_CONF_DIR_EXT[@]}")

  desc="Type\tPath\tAs staff (0) or root (1)"

  while getopts hf: arg
  do
    case $arg in
      'f')
        for item in $configs
        do
          config=(`echo ${item}`)
          if [ "${config[1]}" = "${OPTARG}" ]; then
            CONF=$config[2]; SUDO=$config[3]
            break
          fi
        done
        ;;
      'h')
        view_configs $desc $configs
        break
        ;;
      '*')
        echo -e "Invalid argument '${arg}'\n"
        view_configs $desc $configs
        break
        ;;
    esac

    if [ ! -z "${CONF+E}" ]; then
      if [ $SUDO -eq 1 ]; then
        eval "sudo ${EDITOR} ${CONF}"
      else
        eval "${EDITOR} ${CONF}"
      fi
    else
      echo -e "Invalid argument value '${OPTARG}'\n"
      view_configs $desc $configs
    fi
  done
}

# 1st arg must be Description, after 2nd args must be Configurations
function view_configs() {
  echo -e $1

  for item in ${@:2}
  do
    config=(`echo ${item}`)
    echo -e "${config[1]}\t${config[2]}\t${config[3]}"
  done
}
